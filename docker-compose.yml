services:
  kafka:
    image: docker.io/bitnami/kafka:4.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test: [ "CMD-SHELL", "echo > /dev/null" ]
      interval: 5s
      timeout: 20s
      retries: 15
      start_period: 60s
    networks:
      - app_net

  redis:
    image: redislabs/rebloom:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_net


  fastapi:
    build: .
    container_name: fastapi-app
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
          condition: service_healthy
      alembic:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
    networks:
      - app_net

#  grafana:
#    image: grafana/grafana-enterprise
#    container_name: grafana
#    restart: unless-stopped
#    ports:
#      - '3000:3000'
#    volumes:
#      - grafana-storage:/var/lib/grafana

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  alembic:
    build:
      context: .
    command: alembic upgrade head
    env_file:
      - .env
    volumes:
      - .:/code
    depends_on:
      - postgres

  master:
    image: locustio/locust
    ports:
      - "8089:8089"
    depends_on:
      - fastapi
    networks:
        - app_net
    volumes:
      - ./:/mnt/locust
    working_dir: /mnt/locust/tests
    command: -f locustfile.py --master -H http://fastapi:8000

  worker:
      image: locustio/locust
      networks:
        - app_net
      volumes:
        - ./:/mnt/locust
      working_dir: /mnt/locust/tests
      command: -f locustfile.py --worker --master-host master


networks:
  app_net:

volumes:
    pg_data:
    kafka_data:
