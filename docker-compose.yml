services:
  kafka:
    image: docker.io/bitnami/kafka:4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9094
      - KAFKA_CFG_NUM_PARTITIONS=10
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9093,CONTROLLER://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ulimits:
      nofile:
        soft: 100000
        hard: 100000
    healthcheck:
      test: [ "CMD-SHELL", "echo > /dev/null" ]
      interval: 5s
      timeout: 20s
      retries: 15
      start_period: 60s
    networks:
      - app_net

  deduplicator-worker:
    build: .
    #container_name: deduplicator-worker
    command: [ "python", "app/kafka/consumer_main.py" ]
    working_dir: /code
    environment:
      - PYTHONPATH=/code
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./logs:/code/logs
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    env_file:
      - .env
    networks:
      - app_net

  redis:
    image: redislabs/rebloom:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_net

  fastapi:
    build: .
    container_name: fastapi-app
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
    volumes:
      - ./logs:/code/logs
    networks:
      - app_net

  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - app_net
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  alembic:
    build:
      context: .
    command: alembic upgrade head
    env_file:
      - .env
    volumes:
      - .:/code
    networks:
      - app_net
    depends_on:
      - postgres

  cleanup-worker:
    build: .
    container_name: cleanup-worker
    command: [ "python", "app/core/cleanup.py" ]
    working_dir: /code
    env_file:
      - .env
    environment:
      - PYTHONPATH=/code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_net


  master:
    image: locustio/locust
    ports:
      - "8089:8089"
    depends_on:
      - fastapi
    networks:
      - app_net
    volumes:
      - ./:/mnt/locust
    working_dir: /mnt/locust/tests
    environment:
      - PYTHONPATH=/mnt/locust
    command: -f locustfile.py --master -H http://fastapi:8000

  worker:
    image: locustio/locust
    networks:
      - app_net
    volumes:
      - ./:/mnt/locust
    working_dir: /mnt/locust/tests
    environment:
      - PYTHONPATH=/mnt/locust
    command: -f locustfile.py --worker --master-host master

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app_net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app_net


  grafana:
    image: grafana/grafana:10.4.6
    container_name: grafana
    user: '472'
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_PASSWORD}

    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app_net

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app_net


  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
      - REDIS_EXPORTER_LOG_LEVEL=debug
    ports:
      - "9121:9121"
    networks:
      - app_net

  kafka-exporter:
    image: danielqsj/kafka-exporter
    container_name: kafka-exporter
    restart: unless-stopped
    environment:
      - KAFKA_SERVER=kafka:9092
    ports:
      - "9308:9308"
    networks:
      - app_net


  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.17.1
    restart: unless-stopped
    environment:
      - DATA_SOURCE_URI=postgres:5432/${DB_NAME}?sslmode=disable
      - DATA_SOURCE_USER=${DB_USER}
      - DATA_SOURCE_PASS=${DB_PASSWORD}
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=true
    command:
      - --extend.query-path=/queries.yaml   # раз монтируешь queries.yaml
    volumes:
      - ./queries.yaml:/queries.yaml
    ports:
      - "9187:9187"
    networks:
      - app_net




networks:
  app_net:

volumes:
    pg_data:
    kafka_data:
    prometheus_data:
    grafana_data: