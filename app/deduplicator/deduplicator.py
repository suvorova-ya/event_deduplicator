from sqlalchemy import text
from sqlalchemy.dialects.sqlite import insert

from app.logging_config import logger, perf_logger
import hashlib
import json
import os
import time

import redis.asyncio as aioredis
from sqlalchemy.exc import SQLAlchemyError

from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import connection
from app.core.models import EventBase


DEFAULT_TTL = 60 * 60 * 24 * 7  # 7 –¥–Ω–µ–π

class Deduplicator:
    """
     –ö–ª–∞—Å—Å Deduplicator –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π
     —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Redis Bloom Filter.

     –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
       1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ —Å–æ–±—ã—Ç–∏—è –≤ Redis (SET).
       2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Bloom Filter (–∫–æ–º–∞–Ω–¥–∞ BF.EXISTS).
       3. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ:
          - –î–æ–±–∞–≤–ª—è–µ—Ç —Ö–µ—à –≤ Redis —Å TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏) 7 –¥–Ω–µ–π.
          - –î–æ–±–∞–≤–ª—è–µ—Ç —Ö–µ—à –≤ Bloom Filter.
          - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è Prometheus.
          - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Kafka consumer –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     """
    def __init__(self,ttl:int=DEFAULT_TTL,bloom_name:str="dedup_filter"):
        redis_url = os.getenv("REDIS_URL", "redis://localhost:6379")
        self.redis = aioredis.from_url(redis_url, decode_responses=True)
        self.ttl = ttl
        self.bloom_name = bloom_name


    model = EventBase


    def compute_hash(self,event:dict):
        fields = {
            "client_id": event.get("client_id"),
            "event_datetime":(event.get("event_datetime")[:19]
                               if isinstance(event.get("event_datetime"), str)
                               else str(event.get("event_datetime"))[:19]
                               ),
            "event_name": event.get("event_name"),
            "product_id": event.get("product_id"),
            "sid": event.get("sid","-"),
            "r": event.get("r"),
        }
        data = json.dumps(fields)

        return hashlib.sha256(data.encode("utf-8")).hexdigest()

    async def init_bloom_filter(self):
       exists = await self.redis.exists(self.bloom_name)
       if not exists:
           await self.redis.bf().create(self.bloom_name,0.01,10000)

    async def check_redis(self, event: dict):
        start = time.perf_counter()
        hash_value = self.compute_hash(event)

        # –∞—Ç–æ–º–∞—Ä–Ω–∞—è –±—Ä–æ–Ω—å –∫–ª—é—á–∞: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –µ—ë –ø–æ–ª—É—á–∏—Ç
        ok = await self.redis.set(hash_value, event.get('r'), ex=self.ttl, nx=True)

        if not ok:
            # –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å => –¥—É–±–ª—å
            current_ttl = await self.redis.ttl(hash_value)
            logger.info(
                "–î—É–±–ª—å: %s (event=%s) ttl=%s", hash_value, event.get('event_name'), current_ttl )
            perf_logger.info("‚è±Ô∏è check_redis –∑–∞–Ω—è–ª %.3f —Å–µ–∫", time.perf_counter() - start)
            return False

        try:
            await self.redis.bf().add(self.bloom_name, hash_value)
            logger.info("–£–Ω–∏–∫–∞–ª—å–Ω–æ: %s ‚Äî –¥–æ–±–∞–≤–∏–ª–∏ –≤ Bloom", hash_value)
        except Exception:
            # –Ω–µ –≤–∞–ª–∏–º –ø–æ—Ç–æ–∫ –∏–∑-–∑–∞ Bloom; –∫–ª—é—á —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Bloom –¥–ª—è %s", hash_value)

        perf_logger.info("–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: %s; –∑–∞–Ω—è–ª–æ check_redis %.3f —Å–µ–∫", hash_value, time.perf_counter() - start )
        return True


    @connection
    async def save_db(self, session: AsyncSession, values_list: list[dict]):
        start = time.perf_counter()
        stmt = insert(self.model)
        await session.execute(stmt, values_list)
        try:
            await session.commit()
        except SQLAlchemyError as e:
            await session.rollback()
            raise e
        finally:
            perf_logger.info(f"üíæ save_db –∑–∞–Ω—è–ª {time.perf_counter() - start:.3f} —Å–µ–∫")

    @connection
    async def del_old_events(self, session: AsyncSession):
        await session.execute(
            text(
                """
                DELETE
                FROM events
                WHERE created_at < (timezone('UTC', now()) - INTERVAL '7 days')
                """
            )
        )
        await session.commit()
